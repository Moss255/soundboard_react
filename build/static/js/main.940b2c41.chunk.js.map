{"version":3,"sources":["Views/Soundboard/Soundboard.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["Soundboard","props","audio","Audio","fetchMenu","a","axios","get","process","response","setState","selection","data","fetchFiles","console","log","undefined","files","componentDidMount","match","params","componentDidUpdate","prevProps","handleSelectChange","event","history","push","target","value","handleClick","src","play","render","AppBar","style","flexGrow","padding","position","Typography","variant","marginTop","Container","Select","onChange","displayEmpty","MenuItem","state","map","key","file","Button","size","width","onClick","substring","length","currentFile","React","Component","App","useEffect","basename","path","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.940b2c41.chunk.js","sourcesContent":["import React from 'react';\nimport {Select, MenuItem, Container, Button, AppBar, Typography, makeStyles, Theme} from '@material-ui/core';\nimport ISoundboardProps from './ISoundboardProps';\nimport axios from 'axios';\nimport ISoundboardState from './ISoundboardState';\n\nclass Soundboard extends React.Component<ISoundboardProps, ISoundboardState> {\n    private audio = new Audio();\n\n    constructor(props:ISoundboardProps) {\n        super(props);\n\n        this.state = {\n            selection: [],\n            files: [],\n            currentFile: ''\n        }\n    }\n\n    fetchMenu = async () => {\n        const response = await axios.get(process.env.PUBLIC_URL + '/options.json');\n\n        this.setState({selection: response.data});\n    }\n\n    fetchFiles = async (selection: string) => {\n        console.log(selection);\n        if (selection !== undefined) {\n            const response = await axios.get(process.env.PUBLIC_URL + '/files.json');\n            this.setState({files: response.data[selection]});\n        } else {\n            this.setState({files: []});\n            return false;\n        }\n        \n    }\n\n    componentDidMount = async () => {\n        this.fetchMenu();\n        this.fetchFiles(this.props.match.params.selection);\n    }\n\n    componentDidUpdate = async (prevProps:ISoundboardProps) => {\n        if (prevProps.match.params.selection !== this.props.match.params.selection) {\n            this.fetchFiles(this.props.match.params.selection);\n        }\n    }\n\n    handleSelectChange = (event:React.ChangeEvent<{value: unknown | string}>) => {\n        this.props.history.push(`/${event.target.value}`);\n    }\n\n    handleClick = (value: string) => {\n        this.audio.src = process.env.PUBLIC_URL + '/audio/' + value;\n        this.audio.play();\n      }\n\n    render = () => {\n        return (\n            <div>\n              <AppBar style={{flexGrow: 1, padding: 20}} position='static'>\n                <Typography variant='h6' style={{flexGrow: 1}}>\n                  Soundboard\n                </Typography>\n              </AppBar>\n              <div style={{marginTop: 20}}>\n    \n              </div>\n              <Container>\n              <Select\n              onChange={this.handleSelectChange}\n              value={this.props.match.params.selection}\n              displayEmpty\n              >\n              <MenuItem value={''}>Please select a category</MenuItem>\n              {this.state.selection.map(key => {\n                return (\n                  <MenuItem key={key} value={key}>{key}</MenuItem>\n                )\n              })}\n              </Select>\n      \n              <div>\n                {this.state.files.map(file => {\n                  return (\n                    <Button \n                    size=\"large\"\n                    value={file}\n                    style={{width: '100%'}}\n                    onClick={() => {this.handleClick(file)}}\n                    >\n                    {file.substring(0, file.length - 4)}\n                    </Button>\n                  )\n                })}\n              </div>\n              </Container>\n\n            \n              \n\n              \n\n              \n              \n            </div>\n        )\n    }\n    \n}\n\nexport default Soundboard","import React, { useEffect } from 'react';\nimport axios from 'axios';\nimport Soundboard from '../Views/Soundboard/Soundboard';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\n\nconst App = () => {\n  useEffect(() => {\n\n  }, [])\n\n  return (\n    <Router basename='/soundboard'>\n      <Switch>\n        <Route path='/:selection' render = { (props) => <Soundboard {...props} />} />\n        <Route path='/' render = { (props) => <Soundboard {...props}/>} />\n      </Switch>\n    </Router>\n  )\n}\n    /* componentDidMount = async () => {\n      const response = await axios.get(process.env.PUBLIC_URL + '/files.json');\n\n      let newFiles:Category[] = [];\n      Object.keys(response.data).map(key => {\n        let file:Category = {\n          categoryName: key,\n          filesCollection: response.data[key]\n        }\n        newFiles.push(file);\n        return (file)\n      });\n      this.setState({data: newFiles});\n    } */\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config:any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl:any, config:any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl:any, config:any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}